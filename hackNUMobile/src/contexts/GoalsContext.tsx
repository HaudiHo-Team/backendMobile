import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Goal } from '../types';
import { goalsAPI } from '../services/ApiService';
import { useAuth } from './AuthContext';

interface GoalsContextType {
  goals: Goal[];
  loading: boolean;
  error: string | null;
  loadGoals: () => Promise<void>;
  addToGoal: (goalId: string, amount: number) => Promise<void>;
  createGoal: (goalData: Partial<Goal>) => Promise<void>;
  updateGoal: (goalId: string, goalData: Partial<Goal>) => Promise<void>;
  deleteGoal: (goalId: string) => Promise<void>;
  refreshGoals: () => Promise<void>;
}

const GoalsContext = createContext<GoalsContextType | undefined>(undefined);

export const useGoals = () => {
  const context = useContext(GoalsContext);
  if (context === undefined) {
    throw new Error('useGoals must be used within a GoalsProvider');
  }
  return context;
};

interface GoalsProviderProps {
  children: ReactNode;
}

export const GoalsProvider: React.FC<GoalsProviderProps> = ({ children }) => {
  const [goals, setGoals] = useState<Goal[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { isAuthenticated, isLoading: authLoading } = useAuth();

  const loadGoals = async () => {
    if (!isAuthenticated) {
      setGoals([]);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ GoalsContext: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
      const goalsData = await goalsAPI.getGoals();
      console.log('üì• GoalsContext: –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–∏:', goalsData);
      
      setGoals(goalsData);
    } catch (err: any) {
      console.error('‚ùå GoalsContext: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π:', err);
      setError(err.response?.data?.message || err.message);
      setGoals([]);
    } finally {
      setLoading(false);
    }
  };

  const addToGoal = async (goalId: string, amount: number) => {
    try {
      console.log('üéØ GoalsContext: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∫ —Ü–µ–ª–∏');
      console.log('üìä Goal ID:', goalId);
      console.log('üí∞ Amount:', amount);
      
      // –û–∫—Ä—É–≥–ª—è–µ–º —Å—É–º–º—É –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      const roundedAmount = Math.round(amount);
      console.log('üî¢ –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞:', roundedAmount);
      
      setError(null);
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
      setGoals(prevGoals => {
        return prevGoals.map(goal => {
          if (goal.id === goalId) {
            const currentAmount = goal.currentAmount || 0;
            const newAmount = Math.round(currentAmount + roundedAmount);
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', {
              oldAmount: currentAmount,
              addedAmount: roundedAmount,
              newAmount: newAmount
            });
            return { ...goal, currentAmount: newAmount };
          }
          return goal;
        });
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await goalsAPI.addToGoal(goalId, roundedAmount);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      setGoals(prevGoals => {
        return prevGoals.map(goal => {
          if (goal.id === goalId) {
            return { ...goal, ...response };
          }
          return goal;
        });
      });
      
      console.log('‚úÖ –î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ü–µ–ª–∏');
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –∫ —Ü–µ–ª–∏:', err);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setGoals(prevGoals => {
        return prevGoals.map(goal => {
          if (goal.id === goalId) {
            const currentAmount = goal.currentAmount || 0;
            const oldAmount = currentAmount - Math.round(amount);
            console.log('üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
              currentAmount: currentAmount,
              subtractedAmount: Math.round(amount),
              oldAmount: oldAmount
            });
            return { ...goal, currentAmount: Math.max(0, oldAmount) };
          }
          return goal;
        });
      });
      
      setError(err.response?.data?.message || err.message);
      throw err;
    }
  };

  const createGoal = async (goalData: Partial<Goal>) => {
    try {
      setError(null);
      console.log('üéØ GoalsContext: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å');
      const newGoal = await goalsAPI.createGoal(goalData);
      console.log('‚úÖ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:', newGoal);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫
      setGoals(prevGoals => [newGoal, ...prevGoals]);
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏:', err);
      setError(err.response?.data?.message || err.message);
      throw err;
    }
  };

  const updateGoal = async (goalId: string, goalData: Partial<Goal>) => {
    try {
      setError(null);
      console.log('üéØ GoalsContext: –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å');
      const updatedGoal = await goalsAPI.updateGoal(goalId, goalData);
      console.log('‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedGoal);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
      setGoals(prevGoals => {
        return prevGoals.map(goal => {
          if (goal.id === goalId) {
            return { ...goal, ...updatedGoal };
          }
          return goal;
        });
      });
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏:', err);
      setError(err.response?.data?.message || err.message);
      throw err;
    }
  };

  const deleteGoal = async (goalId: string) => {
    try {
      setError(null);
      console.log('üéØ GoalsContext: –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å');
      await goalsAPI.deleteGoal(goalId);
      console.log('‚úÖ –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞');
      
      // –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
      setGoals(prevGoals => {
        return prevGoals.filter(goal => goal.id !== goalId);
      });
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏:', err);
      setError(err.response?.data?.message || err.message);
      throw err;
    }
  };

  const refreshGoals = async () => {
    await loadGoals();
  };

  useEffect(() => {
    if (isAuthenticated && !authLoading) {
      loadGoals();
    } else if (!authLoading) {
      setGoals([]);
    }
  }, [isAuthenticated, authLoading]);

  const value: GoalsContextType = {
    goals,
    loading,
    error,
    loadGoals,
    addToGoal,
    createGoal,
    updateGoal,
    deleteGoal,
    refreshGoals,
  };

  return <GoalsContext.Provider value={value}>{children}</GoalsContext.Provider>;
};