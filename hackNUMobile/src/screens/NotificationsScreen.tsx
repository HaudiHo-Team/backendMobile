import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TouchableOpacity
} from 'react-native';
import { ScreenProps } from '../types';
import { COLORS, SPACING, FONT_SIZES } from '../constants';
import { Layout } from '../ui/components';
import { useLanguage } from '../contexts/LanguageContext';

const NotificationsScreen: React.FC<ScreenProps> = ({ navigation }) => {
  const { t } = useLanguage();
  const [notifications, setNotifications] = useState([
    {
      id: '1',
      title: 'Zaman bank',
      message: '–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      time: '18 –æ–∫—Ç—è–±—Ä—è',
      isRead: false,
      icon: 'üè¶'
    },
    {
      id: '2',
      title: '–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      message: '–í—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
      time: '17 –æ–∫—Ç—è–±—Ä—è',
      isRead: false,
      icon: 'üîí'
    },
    {
      id: '3',
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      message: '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      time: '16 –æ–∫—Ç—è–±—Ä—è',
      isRead: true,
      icon: 'üì±'
    },
    {
      id: '4',
      title: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞',
      message: '–ù–∞ –≤–∞—à —Å—á–µ—Ç –ø–æ—Å—Ç—É–ø–∏–ª–æ 50 000 ‚Ç∏',
      time: '15 –æ–∫—Ç—è–±—Ä—è',
      isRead: true,
      icon: 'üí∞'
    },
    {
      id: '5',
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
      message: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
      time: '14 –æ–∫—Ç—è–±—Ä—è',
      isRead: true,
      icon: '‚è∞'
    }
  ]);

  const handleNotificationPress = (notificationId: string) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === notificationId ? { ...notif, isRead: true } : notif
      )
    );
    console.log('–ù–∞–∂–∞—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', notificationId);
  };

  const handleMarkAllRead = () => {
    setNotifications(prev => 
      prev.map(notif => ({ ...notif, isRead: true }))
    );
    console.log('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');
  };

  const handleSettingsPress = () => {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  };

  const handleShowAllPress = () => {
    console.log('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  };

  const renderNotification = (notification: any) => (
    <TouchableOpacity key={notification.id} style={styles.notificationItem} onPress={() => handleNotificationPress(notification.id)}>
      <View style={styles.notificationIcon}>
        <Text style={styles.iconText}>{notification.icon}</Text>
      </View>
      <View style={styles.notificationContent}>
        <View style={styles.notificationHeader}>
          <Text style={styles.notificationTitle}>{notification.title}</Text>
          {!notification.isRead && <View style={styles.unreadDot} />}
        </View>
        <Text style={[
          styles.notificationMessage,
          !notification.isRead && styles.unreadMessage
        ]}>
          {notification.message}
        </Text>
        <Text style={styles.notificationTime}>{notification.time}</Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <Layout 
      headerTitle="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" 
      showBackButton={true}
      onBackPress={() => navigation.goBack()}
    >
      <ScrollView style={styles.container}>
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>3</Text>
            <Text style={styles.statLabel}>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>12</Text>
            <Text style={styles.statLabel}>–í—Å–µ–≥–æ</Text>
          </View>
        </View>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity style={styles.actionButton} onPress={handleMarkAllRead}>
            <Text style={styles.actionText}>–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.actionButton} onPress={handleSettingsPress}>
            <Text style={styles.actionText}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Text>
          </TouchableOpacity>
        </View>

        {/* –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <View style={styles.notificationsList}>
          {notifications.map(renderNotification)}
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ" */}
        <TouchableOpacity style={styles.showAllButton} onPress={handleShowAllPress}>
          <Text style={styles.showAllText}>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
        </TouchableOpacity>
      </ScrollView>
    </Layout>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: COLORS.surface,
    margin: SPACING.md,
    borderRadius: 12,
    padding: SPACING.lg,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statValue: {
    fontSize: FONT_SIZES.xl,
    fontWeight: 'bold',
    color: COLORS.primary,
    marginBottom: SPACING.xs,
  },
  statLabel: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.textSecondary,
    textAlign: 'center',
  },
  actionsContainer: {
    flexDirection: 'row',
    paddingHorizontal: SPACING.md,
    marginBottom: SPACING.md,
    gap: SPACING.sm,
  },
  actionButton: {
    flex: 1,
    backgroundColor: COLORS.surface,
    padding: SPACING.md,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  actionText: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.primary,
    fontWeight: '500',
  },
  notificationsList: {
    backgroundColor: COLORS.surface,
    marginHorizontal: SPACING.md,
    borderRadius: 12,
    overflow: 'hidden',
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    padding: SPACING.md,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  notificationIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: COLORS.background,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING.md,
  },
  iconText: {
    fontSize: 20,
  },
  notificationContent: {
    flex: 1,
  },
  notificationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  notificationTitle: {
    fontSize: FONT_SIZES.md,
    color: COLORS.text,
    fontWeight: 'bold',
    flex: 1,
  },
  unreadDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: COLORS.primary,
    marginLeft: SPACING.sm,
  },
  notificationMessage: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.textSecondary,
    lineHeight: 18,
    marginBottom: 4,
  },
  unreadMessage: {
    color: COLORS.text,
    fontWeight: '500',
  },
  notificationTime: {
    fontSize: FONT_SIZES.xs,
    color: COLORS.textSecondary,
  },
  showAllButton: {
    backgroundColor: COLORS.surface,
    margin: SPACING.md,
    padding: SPACING.md,
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: COLORS.border,
  },
  showAllText: {
    fontSize: FONT_SIZES.md,
    color: COLORS.primary,
    fontWeight: '500',
  },
});

export default NotificationsScreen;
